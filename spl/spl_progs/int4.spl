alias physicalSP S0;
alias filename S1;
alias counter S3;
alias sysCallNo S4;
alias Fatindex S5;
alias SWOPindex S6;
alias PPOFindex S7;
alias CurrentPCB S2;
alias CurrentPID S10;
alias fileDesc S8;
alias wordToWrite S9;
alias DataBlock S11;
alias BasicBlock S12;
alias LSEEK S13;
alias FreeBlock S14;

 
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
sysCallNo=[physicalSP-1];

PPOFindex=0;
SWOPindex=0;
Fatindex=0;
counter=0;
FreeBlock=0;

if ( sysCallNo == 5) then
	 wordToWrite=[physicalSP-3];
         fileDesc=[physicalSP-4];

         if(fileDesc < 0 || fileDesc > 7) then
               [physicalSP-2]=-1;
	        ireturn;
         endif; 
	
	 CurrentPID = (PTBR - 1024) / 8;
         CurrentPCB = READY_LIST + 32 * CurrentPID;
				
         if([CurrentPCB + 15 + 2*fileDesc ] == -1) then
        	
                [physicalSP-2]=-1;
	        ireturn;
	 endif;

         SWOPindex=[CurrentPCB + 15 + 2*fileDesc ];
	 LSEEK=[CurrentPCB + 15 + 2*fileDesc +1 ];
         Fatindex=[FILE_TABLE + SWOPindex*2];
         BasicBlock=[FAT + 8* Fatindex + 2];
	 load(1,BasicBlock);
	 DataBlock=LSEEK/512;

         if([512+DataBlock]==-1) then

	     while(FreeBlock<448 && [DISK_LIST + FreeBlock]==1) do
                FreeBlock=FreeBlock+1;
	     endwhile;

             if(FreeBlock==448) then
                 [physicalSP-2]=-1;
                 ireturn;


	     else
                  [DISK_LIST + FreeBlock]=1;
		  [512+LSEEK/512]=FreeBlock;
	          [FAT + 8*Fatindex + 1]=[FAT + 8*Fatindex + 1]+ 512;
		 
	     endif;

          endif;
	FreeBlock=[512+LSEEK/512];
	store(1,BasicBlock);
	store(5,19);
	store(6,20);
        load(1,FreeBlock);
   	[512 + (LSEEK%512) ]=wordToWrite;
        store(1,FreeBlock);
        [CurrentPCB + 15 + 2*fileDesc + 1] =  [CurrentPCB + 15 + 2*fileDesc + 1] + 1;
	[physicalSP - 2]=0;
	ireturn;


endif;





