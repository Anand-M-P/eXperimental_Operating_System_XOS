alias physicalSP S0;
alias newPCB S1;
alias counter S3;
alias sysCallNo S4;
alias nextPCB S5;
alias currentPCB S2;
alias currentPID S10;
alias newphysicalSP S6; 
alias WaitingPID S7;
alias ptEntry S8;
alias SWOFIndex S9;
  
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
sysCallNo=[physicalSP-1];

currentPID = (PTBR - 1024) / 8;
currentPCB = READY_LIST + 32 * currentPID;

counter=0;

if ( sysCallNo == 10) then                                                           
		while(counter<32) do                                           //resuming all processes
			if([READY_LIST+32*counter+1]==100+currentPID) then
				[READY_LIST+32*counter+1]=1;
			endif;
			counter=counter+1;
		endwhile;	

		counter=0;
		newPCB=currentPCB;
		while(counter<32 && [newPCB+1] !=1) do
			
			if(newPCB==READY_LIST+32*31) then
				newPCB=READY_LIST;
			else
				newPCB=newPCB+32;
			endif;
			counter=counter+1;
		endwhile;
		
//no ready state process

	        if(counter==32) then
			halt;
		endif;
	//----------------------PPOF & SWOF TABLE-------------------------------
		counter=0;
		while(counter<8) do                                                         // closing files of current process	
			if([currentPCB+15+2*counter] != -1) then
				SWOFIndex = currentPCB + 15 + 2 * counter;
				[FILE_TABLE+[SWOFIndex]*2+1] = [FILE_TABLE+[SWOFIndex]*2+1]-1;
				if([FILE_TABLE+[SWOFIndex]*2+1]==0) then
					[FILE_TABLE+[SWOFIndex]*2]=-1;
				endif;
				[SWOFIndex]=-1;
				[currentPCB+15+2*counter+1]=-1;
			endif;
      			counter=counter+1;
		endwhile;	
		
		[currentPCB+1]=0;

		counter=0;	
		while(counter<4) do   
			// valid page of current process   decremented  
			ptEntry =  PTBR+2*counter;                                          
 			if([ptEntry + 1]==01 || [ptEntry + 1]== 11) then
				[MEM_LIST+[ptEntry]]=[MEM_LIST+[ptEntry]]-1;
			else
				if([ptEntry]>447 && [ptEntry]<512) then                                //swap area block	
					[DISK_LIST+[ptEntry]]=[DISK_LIST+[ptEntry]]-1;
				endif;
			endif;
			
			[ptEntry]=-1;
			[ptEntry+1]="00";
			counter=counter+1;
		endwhile;
		
		//counter=0;
		//while(counter<4) do
		//	[PTBR+counter*2]=-1;
		//	[PTBR+counter*2+1]="00";
		//	counter=counter+1;
		//endwhile;

		store(6,20);
			
		BP=[newPCB+2];
		SP=[newPCB+3];
		R0=[newPCB+7];
		R1=[newPCB+8];	
		R2=[newPCB+9];	
		R3=[newPCB+10];
		R4=[newPCB+11];
		R5=[newPCB+12];
		R6=[newPCB+13];
		R7=[newPCB+14];
		PTBR=[newPCB+5];
		PTLR=[newPCB+6];
		SP = SP + 1; 

		newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
		[ newphysicalSP ] = [ newPCB + 4 ];                                       // Stores IP field value of PCB on the stack 
		[newPCB + 1]=2;
		
		ireturn;
	
 endif;

// wait system call.
if (sysCallNo==13 ) then
	WaitingPID=[physicalSP-3];

	if([READY_LIST + WaitingPID*32 + 1]==0 || [READY_LIST + WaitingPID*32 + 1]==2) then
		[physicalSP-2]=-1;
		ireturn;
	endif;

	[currentPCB+1]=100+WaitingPID;
	[ currentPCB + 2 ] = BP;
	[ currentPCB + 3 ] = SP - 1; 
	[ currentPCB + 4 ] = [ physicalSP ];
	[ currentPCB + 5 ] = PTBR;
	[ currentPCB + 6 ] = PTLR ; 
	[ currentPCB + 7 ] = R0; 
	[ currentPCB + 8 ] = R1; 
	[ currentPCB + 9 ] = R2; 
	[ currentPCB + 10 ] = R3; 
	[ currentPCB + 11 ] = R4; 
	[ currentPCB + 12 ] = R5; 
	[ currentPCB + 13 ] = R6; 
	[ currentPCB + 14 ] = R7;
		
		counter=0;
		newPCB=currentPCB+32;
		while(counter<32) do
			if([newPCB+1] ==1) then
				nextPCB=newPCB;
				break;
			endif;

			if(newPCB==READY_LIST+32*31) then
				newPCB=READY_LIST;
			else
				newPCB=newPCB+32;
			endif;
			counter=counter+1;
		endwhile;
		
		BP=[newPCB+2];
		SP=[newPCB+3];
		R0=[newPCB+7];
		R1=[newPCB+8];	
		R2=[newPCB+9];	
		R3=[newPCB+10];
		R4=[newPCB+11];
		R5=[newPCB+12];
		R6=[newPCB+13];
		R7=[newPCB+14];
		PTBR=[newPCB+5];
		PTLR=[newPCB+6];
		SP = SP + 1; 

		newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
		[ newphysicalSP ] = [ newPCB + 4 ];                                       // Stores IP field value of PCB on the stack 
		[newPCB + 1]=2;

		
		[physicalSP-2]=0;
		ireturn;
endif;

if (sysCallNo==14 ) then
	counter=0;
	while(counter<32) do
		if([READY_LIST+32*counter+1]==100+currentPID) then
			[READY_LIST+32*counter+1]=1;
		endif;
		counter=counter+1;
	endwhile;	

	[physicalSP-2]=0;
	ireturn;
endif;





		  


