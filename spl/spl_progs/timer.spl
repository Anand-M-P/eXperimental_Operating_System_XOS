//finding the process id ofmthe current process

alias currentPID S0;
currentPID =(PTBR - 1024) / 8;

//finding pcb of current process

alias currentPCB S1;
currentPCB = READY_LIST + 32 * currentPID;

[currentPCB + 1]=1;//setting state to ready

[ currentPCB + 2 ] = BP;
[ currentPCB + 3 ] = SP - 1;	

//finding the physical addr.
alias physicalSP S2;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

[ currentPCB + 4 ] = [ physicalSP ]; // Save IP of current process in the PCB from the stack

[ currentPCB + 5 ] = PTBR;
[ currentPCB + 6 ] = PTLR;

[ currentPCB + 7 ] = R0;	
[ currentPCB + 8 ] = R1;
[ currentPCB + 9 ] = R2;
[ currentPCB + 10 ] = R3;
[ currentPCB + 11] = R4;
[ currentPCB + 12 ] = R5;
[ currentPCB + 13] = R6;
[ currentPCB + 14 ] = R7;

alias newPCB S3;

newPCB = currentPCB + 32;
while (1) do
	if([newPCB + 1] == 1) then
		break;
	else 
		newPCB = newPCB + 32;
		if(newPCB > 2559) then
			newPCB = 1536;
		endif;
	endif;
endwhile;
	
R0=[newPCB+7];
R1=[newPCB+8];
R2=[newPCB+9];
R3=[newPCB+10];
R4=[newPCB+11];
R5=[newPCB+12];
R6=[newPCB+13];
R7=[newPCB+14];

PTBR= [newPCB + 5];
PTLR= [newPCB + 6];


BP = [newPCB + 2];
SP = [newPCB + 3];


SP = SP + 1; 
alias newphysicalSP S2; 
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
[ newphysicalSP ] = [ newPCB + 4 ]; // Stores IP field value of PCB on the stack 


[newPCB + 1] = 2;

ireturn;
